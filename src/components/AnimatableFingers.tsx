import type { SpringValue } from "@react-spring/web";

import { a } from "@react-spring/web";

// Size of the frame the two SVG files are exported from
export const FINGERS_SIZE_ORIGINAL = 1000;

// SVG sizes / positions
const PINKY_LEFT_GEOMETRY = { w: 625, h: 787, y: 212.65 };
const PINKY_RIGHT_GEOMETRY = { w: 650, h: 830, y: 169.17 };

const PINKY_LEFT =
  `<svg xmlns="http://www.w3.org/2000/svg" width="625" height="787" fill="none"><path fill="#0007B0" d="M.013 291.623c17.875-8.315 40.197-8.75 56.812-6.244 9.791 1.477 24.313 5.508 39.464 20.743C109.095 319 121.892 339.418 133 371.899c3.851-3.132 8.62-6.491 14.441-9.906 9.964-5.844 20.233-11.433 31.841-14.498 11.868-3.135 24.678-3.531 39.816.16 15.119 3.685 23.949 9.079 30.855 16.424 3.082 3.277 5.647 6.813 7.975 10.02l.243.335c2.473 3.406 4.891 6.716 8.025 10.238 4.755 5.345 8.423 12.754 11.452 21.424 3.073 8.796 5.732 19.61 8.099 32.356 4.732 25.486 8.469 59.66 11.77 102.808l.034.448-.006.449c-.13 9.71.623 25.379 3.286 40.39 1.329 7.498 3.094 14.592 5.348 20.593a65.331 65.331 0 0 0 1.248 3.089c13.716-17.047 31.751-40.714 48.945-65.802 21.242-30.995 40.633-63.351 49.391-87.883l.096-.27.112-.265c15.108-35.697 22.047-53.526 27.822-68.363 8.391-21.557 14.329-36.813 39.294-91.398.955-4.958 2.675-10.772 4.495-16.704.42-1.37.85-2.76 1.286-4.171 1.706-5.513 3.512-11.348 5.205-17.523 4.273-15.584 7.435-32.017 5.97-47.041-2.134-21.884-1.92-57.992.244-91.609 1.086-16.869 2.676-33.323 4.754-47.25 2.028-13.582 4.662-25.823 8.223-33.558 7.065-15.343 19.018-24.31 30.339-29.047 10.893-4.558 22.279-5.632 29.434-3.931C576.44 4.6 607.86 23.105 615.194 78.04c8.879 58.396 20.089 206.072-9.934 336.227l-.144.625-83.464 225.196-61.285 146.363C203.937 766.343 1.866 552.78.013 291.623Z"/><path fill="#ED9AC9" d="M99.368 587.196a502.343 502.343 0 0 0 17.277 21.811c4-29.695 8.637-65.896 11.561-94.523 2.456-24.051 4.519-51.514 5.965-72.914a3390.877 3390.877 0 0 0 1.685-26.463c.195-3.269.345-5.87.446-7.656l.154-2.762-9.985-.542-9.985-.541-.152 2.713c-.1 1.767-.249 4.349-.442 7.597-.388 6.496-.956 15.657-1.676 26.305-1.44 21.319-3.485 48.517-5.907 72.231-2.29 22.428-5.656 49.655-8.941 74.744Zm171.746 145.453a498.173 498.173 0 0 0 18.757 9.183c4.465-27.72 14.402-80.02 26.442-116.342l-18.984-6.293c-11.688 35.259-21.293 84.165-26.215 113.452Z"/><path fill="#FF5262" d="M567.934 89.878c-2.581-9.806-4.116-27.603-3.117-63.585.395.126.797.261 1.205.407 6.192 2.214 13.894 6.828 19.696 16.854 2.845 4.916 5.322 12.286 7.336 21.224 1.98 8.788 3.372 18.436 4.341 27.494.953 8.91 1.482 17.104 1.773 23.127a44.167 44.167 0 0 1-5.756-1.125c-5.913-1.566-10.977-4.214-14.048-7.487-1.135-1.209-2.332-2.388-3.32-3.361-.337-.331-.65-.64-.927-.916-1.201-1.2-2.107-2.164-2.905-3.187-1.436-1.84-2.955-4.418-4.278-9.445Z"/></svg>`;

const PINKY_RIGHT =
  `<svg xmlns="http://www.w3.org/2000/svg" width="650" height="830" fill="none"><path fill="#0007B0" d="M189.339 829.475a2668.554 2668.554 0 0 0-3.815-17.93c-1.516-7.012-3.002-13.971-4.478-20.881-14.635-68.521-28.291-132.461-60.654-200.508l-.082-.171-.074-.173c-8.859-20.6-16.756-34.417-25.687-50.045-4.13-7.225-8.48-14.837-13.249-23.685-14.908-27.659-32.81-65.614-58.47-138.031C-14.031 274.025 3.44 162.62 9.375 124.778c.796-5.074 1.399-8.952 1.62-11.186 3.445-27.49 16.977-57.66 35.123-79.723C63.83 12.331 88.789-4.74 115.237 1.464c11.338 2.66 20.318 8.177 27.467 17.092 6.87 8.565 11.693 19.832 15.839 33.406 2.214 7.252 9.377 38.615 10.723 77.869.684 19.941-.44 36.327-1.483 51.529-.245 3.577-.486 7.088-.698 10.564-1.112 18.265-1.493 36.238 2.074 59.774 8.891 58.652 29.17 112.358 45.317 145.913.287.596.591 1.283.95 2.092 1.381 3.117 3.571 8.061 8.689 16.693 6.271 10.576 15.969 25.49 30.316 45.163 18.406 25.24 31.78 47.521 42.298 65.149 10.847 18.178 17.921 30.019 24.236 36.369 3.747 3.768 6.511 6.428 8.835 8.227 1.653 1.28 2.588 1.722 2.975 1.869a5.9 5.9 0 0 0 .677-.466c1.421-1.103 3.589-3.454 6.672-8.104 5.141-7.754 6.329-12.086 8.392-19.605l.399-1.451.201-.727c2.64-9.511 6.587-22.163 18.452-45.174 19.01-36.867 42.596-53.705 54.799-57.79 11.212-4.699 29.154-10.209 47.658-11.845 10.387-.918 21.757-.683 32.39 2.135.126-.526.256-1.066.391-1.619l.221-.9c2.117-8.555 5.397-20.222 10.055-32.602 4.642-12.338 10.754-25.662 18.624-37.382 7.822-11.649 17.815-22.367 30.466-28.561 17.278-8.458 32.364-8.715 46.804-7.19 4.675.493 9.058 1.121 13.361 1.737 2.84.407 7.014 1.582 11.407 2.818 5.824 1.639 12.033 3.387 16.029 3.597l.003 3.231v.208c.01 5.975.02 12.383-.211 18.089v.006L646.171 346c-10.347-.219-19.977-1.589-28.422-2.791-3.893-.554-7.535-1.073-10.879-1.426-10.82-1.142-20.506-.999-31.234 3.203a62.236 62.236 0 0 0-4.523 1.987l-.147.072c-8.307 4.067-15.895 11.677-22.656 21.747-6.714 9.998-12.186 21.786-16.509 33.276-4.307 11.449-7.371 22.328-9.359 30.362a261.877 261.877 0 0 0-1.953 8.476l54.421 65.354 27.29 38.36-.552 1.165c-2.824 5.973-3.967 8.389-9.628 19.17l-.04.007-.814-1.321-15.328-21.56-11.851-16.25-.303-.549c-.187-.338-.382-.687-.583-1.046l-.109-.194-.079-.14-3.861-5.431-55.695-66.884c-8.405-3.704-19.356-4.734-31.571-3.654-16.241 1.436-32.346 6.411-42.024 10.509l-.442.188-.459.144c-2.068.65-6.228 2.763-11.548 6.952a87.068 87.068 0 0 0-6.733 5.918c-7.759 7.535-16.811 18.834-25.233 35.166-11.191 21.703-14.655 33.064-16.956 41.356l-.332 1.203-.263.961c-2.169 7.931-4.064 14.861-10.999 25.321-2.191 3.305-4.419 6.295-6.754 8.827-1.399 1.518-2.837 2.871-4.33 4.029l-.002.002c-4.267 3.31-9.354 5.285-15.125 4.589-5.241-.633-9.604-3.328-13.029-5.98-3.492-2.703-7.11-6.254-10.773-9.938-8.11-8.155-16.277-21.854-25.816-37.854l-1.414-2.371c-10.48-17.563-23.457-39.168-41.282-63.611-14.639-20.073-24.703-35.52-31.36-46.749-6.047-10.198-9.609-17.453-11.04-21.668-16.739-34.924-37.285-89.528-46.487-150.232-3.861-25.473-3.419-44.998-2.263-63.987.227-3.712.477-7.379.728-11.051l.001-.005c1.033-15.116 2.072-30.316 1.427-49.136-1.289-37.587-8.183-67.212-9.863-72.713-3.883-12.715-7.809-21.118-12.313-26.735-2.95-3.678-6.287-6.338-10.48-8.183.19 7.812-.231 17.001-1.75 26.51-2.499 15.645-8.142 33.238-20.007 46.804-14.574 16.663-31.97 23.055-45.8 25.317-6.883 1.126-12.905 1.238-17.306 1.111-.629-.018-1.226-.041-1.786-.067-.266 1.785-.574 3.785-.912 5.986v.002c-6.09 39.583-22.223 144.482 12.622 242.821 25.394 71.661 42.9 108.644 57.225 135.221 4.309 7.996 8.435 15.22 12.467 22.279l.002.005.001.001c9.178 16.069 17.872 31.292 27.158 52.859 33.363 70.207 47.476 136.343 62.037 204.579 1.489 6.977 2.982 13.975 4.501 21.003 1.563 7.227 4.289 20.196 4.289 20.196-3.501.414-5.536.654-7.575.865-2.832.294-5.67.531-12.45 1.098Z"/><path fill="#0007B0" d="M470.293 674.434c5.941 6.862 13.06 14.76 20.281 22.628a502.481 502.481 0 0 1-14.908 13.335c-5.68-6.19-11.316-12.421-16.395-18.182-23.376 5.778-42.729 6.734-61.179.445-19.787-6.744-36.979-21.315-56.537-43.018l14.857-13.389c18.984 21.066 33.343 32.436 48.133 37.477 11.278 3.844 23.736 4.313 40.182 1.207-9.636-12.054-18.851-24.714-26.231-35.234a922.351 922.351 0 0 1-12.199-17.83 700.905 700.905 0 0 1-4.045-6.136l-.321-.493-.24-.372-.087-.134s-.001-.002 8.411-5.41l8.411-5.408.069.106.22.34c.196.303.49.756.875 1.345a694.137 694.137 0 0 0 3.349 5.068 891.277 891.277 0 0 0 11.93 17.437c9.875 14.077 22.829 31.67 35.424 46.218Z"/><path fill="#ED9AC9" d="M138.537 581.734c33.363 70.208 47.476 136.343 62.037 204.579l78.98-249.357c-10.48-17.564-23.457-39.169-41.282-63.612-14.639-20.073-24.703-35.52-31.36-46.748-6.047-10.199-9.609-17.454-11.04-21.669-16.738-34.923-37.285-89.528-46.487-150.232-3.861-25.473-3.419-44.998-2.263-63.986.227-3.713.477-7.38.728-11.051l.001-.006c1.033-15.116 2.072-30.315 1.427-49.136-1.289-37.587-8.183-67.211-9.863-72.712-3.883-12.716-7.809-21.119-12.313-26.736-2.95-3.678-6.287-6.338-10.48-8.182.19 7.811-.231 17-1.75 26.51-2.499 15.644-8.142 33.237-20.007 46.803-14.574 16.663-31.97 23.056-45.8 25.318-6.883 1.125-12.905 1.237-17.306 1.11-.629-.018-1.226-.041-1.786-.067-.266 1.786-.574 3.785-.912 5.986v.002c-6.089 39.584-22.222 144.483 12.623 242.821 25.394 71.662 42.9 108.644 57.225 135.222 4.309 7.996 8.435 15.219 12.467 22.279l.002.004.001.001c9.178 16.07 17.872 31.292 27.158 52.859Z"/><path fill="#FF5262" d="M58.514 53.43c10.23-14.177 22.125-22.858 31.578-27.728a66.506 66.506 0 0 1 6.523-2.946c.199 6.756-.129 14.966-1.49 23.484-2.192 13.727-6.894 27.168-15.311 36.792-10.78 12.324-23.49 17.032-33.974 18.746a68.106 68.106 0 0 1-8.214.828 261.01 261.01 0 0 1 3.19-10.77c4.155-12.97 10.138-27.927 17.698-38.406Z"/></svg>`;

const PINKY_LEFT_URL = `data:image/svg+xml,${encodeURIComponent(PINKY_LEFT)}`;
const PINKY_RIGHT_URL = `data:image/svg+xml,${encodeURIComponent(PINKY_RIGHT)}`;

export function AnimatableFingers({
  springValues,
  openDistance = 400,
  size = 140,
}: {
  openDistance?: number;
  size?: number;
  springValues: {
    closeFingers: SpringValue;
    leftFingerAppear: SpringValue;
    rightFingerAppear: SpringValue;
  };
}) {
  const ratio = size / FINGERS_SIZE_ORIGINAL;
  return (
    <a.div
      css={{
        position: "relative",
        width: size,
        height: size,
        userSelect: "none",
      }}
    >
      <a.div
        style={{
          opacity: springValues.leftFingerAppear,
          transform: springValues.leftFingerAppear.to((v) => (`
            translate3d(0, ${500 * ratio * (1 - v)}px, 0)
          `)),
        }}
      >
        <a.img
          alt=""
          src={PINKY_LEFT_URL}
          width={ratio * PINKY_LEFT_GEOMETRY.w}
          height={ratio * PINKY_LEFT_GEOMETRY.h}
          style={{
            transform: springValues.closeFingers.to((v) => (`
              translate3d(
                ${-(openDistance / 2) * ratio * (1 - v)}px,
                ${20 * ratio * (1 - v)}px,
                0
              )
              rotate3d(0, 0, 1, ${-20 * (1 - v)}deg)
            `)),
          }}
          css={{
            position: "absolute",
            top: ratio * PINKY_LEFT_GEOMETRY.y,
            left: "0",
          }}
        />
      </a.div>
      <a.div
        style={{
          opacity: springValues.rightFingerAppear,
          transform: springValues.rightFingerAppear.to((v) => (`
            translate3d(0, ${500 * ratio * (1 - v)}px, 0)
          `)),
        }}
      >
        <a.img
          alt=""
          src={PINKY_RIGHT_URL}
          width={ratio * PINKY_RIGHT_GEOMETRY.w}
          height={ratio * PINKY_RIGHT_GEOMETRY.h}
          style={{
            transform: springValues.closeFingers.to((v) => (`
              translate3d(
                ${(openDistance / 2) * ratio * (1 - v)}px,
                ${20 * ratio * (1 - v)}px,
                0
              )
              rotate3d(0, 0, 1, ${20 * (1 - v)}deg)
            `)),
          }}
          css={{
            position: "absolute",
            top: ratio * PINKY_RIGHT_GEOMETRY.y,
            right: "0",
          }}
        />
      </a.div>
    </a.div>
  );
}
